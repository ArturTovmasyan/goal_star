<?php

namespace LB\MessageBundle\Entity\Repository;
use Doctrine\DBAL\Connection;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;
use LB\UserBundle\Entity\UserRelation;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $userId
     * @param $msgId
     * @return array
     */
    public function findUserMessage($userId, $msgId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m
                           FROM LBMessageBundle:Message m
                           JOIN m.fromUser fu
                           WHERE m.id = :id AND fu.id = :userId AND m.isDeleted != 1
                           ")
            ->setParameter('id', $msgId)
            ->setParameter('userId', $userId)
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }


    /**
     * @param $user1Id
     * @param $user2Id
     * @param int $start
     * @param int $count
     * @return array
     */
    public function findUsersMessages($user1Id, $user2Id, $start, $count)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m, fu
                           FROM LBMessageBundle:Message m
                           JOIN m.fromUser fu
                           JOIN m.toUser tu
                           WHERE ((fu.id = :user1Id AND tu.id = :user2Id) OR (fu.id = :user2Id AND tu.id = :user1Id)) AND m.isDeleted != 1
                           ORDER BY m.created DESC")
            ->setParameter('user1Id', $user1Id)
            ->setParameter('user2Id', $user2Id)
            ->setFirstResult($start)
            ->setMaxResults($count)
            ->getResult();
    }

//    /**
//     * This function is used to get message user with top favorite
//     *
//     * @param $userId
//     * @param $userClass
//     * @return array
//     */
//    public function findMessageUsers($userId, $userClass, $start, $count)
//    {
//        $query =  $this->getEntityManager()
//            ->createQuery("SELECT u, pi,
//                                  (CASE WHEN ur.fromUser = :userId then NULLIF(-ur.fromConversation, '0') ELSE NULLIF(-ur.toConversation, '0') END) AS HIDDEN status,
//                                  (CASE WHEN m.toUser = :userId AND m.isRead = 0 then 1 ELSE 0 END) AS HIDDEN newMsg
//                           FROM $userClass u
//                           LEFT JOIN u.profileImage pi
//                           JOIN LBMessageBundle:Message m WITH m.fromUser = u OR m.toUser = u
//                           JOIN m.fromUser fu
//                           JOIN m.toUser tu
//                           LEFT JOIN LBUserBundle:UserRelation ur WITH (ur.fromUser = fu and ur.toUser = tu)  OR (ur.fromUser = tu and ur.toUser = fu)
//                           WHERE ((fu.id = :userId OR tu.id = :userId)) AND u.id != :userId and m.isDeleted = false
//                           ORDER BY m.created DESC, status DESC, newMsg DESC ")
//            ->setParameter('userId', $userId)
//            ->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true)
//            ->setFirstResult(0)
//            ->setMaxResults(100);
//            ;
//
//        $paginator = new Paginator($query, $fetchJoinCollection = true);
//        $result = $paginator->getIterator()->getArrayCopy();
//        return $result;
//
//    }

    /**
     * @param $userId
     * @param $userClass
     * @param $ids
     * @param $isAdmin
     * @param $start
     * @param $count
     * @return array
     */
    public function findMessageUsers($userId, $userClass, $ids, $isAdmin,  $start, $count)
    {
        $name = $isAdmin ? "concat(u.firstName , ' ' ,  u.lastName) as name" : "u.firstName  as name";

        $notInId = "";

        // check ids
        if(count($ids) > 0){
            $notInId = " AND u.id not in (:ids)";
        }

        $query =  $this->getEntityManager()
            ->createQuery("SELECT u.id as id, $name , u.lastActivity,
                              (CASE WHEN i.path is not null then concat('uploads/', i.path) ELSE u.socialPhotoLink END) AS profileImage
                           FROM $userClass u
                           LEFT JOIN u.profileImage i
                           INDEX BY u.id
                           JOIN LBMessageBundle:Message m WITH m.fromUser = u OR m.toUser = u
                           JOIN m.fromUser fu
                           JOIN m.toUser tu
                           WHERE ((fu.id = :userId OR tu.id = :userId)) AND u.id != :userId and m.isDeleted = false
                           $notInId
                           ORDER BY m.created DESC")
            ->setParameter('userId', $userId)
            ->setFirstResult($start)
            ->setMaxResults($count)
        ;

        if(strlen($notInId) > 1){
            $query->setParameter('ids', $ids);
        }

        $paginator = new Paginator($query, $fetchJoinCollection = true);
        return $paginator->getQuery()->getArrayResult();
    }

    /**
     * @param $userId
     * @param $userClass
     * @param $isAdmin
     * @return array
     */
    public function findNewMessageUsers($userId, $userClass, $isAdmin)
    {
        $name = $isAdmin ? "concat(u.firstName , ' ' ,  u.lastName) as name" : "u.firstName  as name";

        $query =  $this->getEntityManager()
            ->createQuery("SELECT u.id as id, $name , u.lastActivity,
                                  (CASE WHEN i.path is not null then concat('uploads/', i.path) ELSE u.socialPhotoLink END) AS profileImage
                           FROM $userClass u
                           LEFT JOIN u.profileImage i
                           INDEX BY u.id
                           LEFT JOIN u.profileImage pi
                           JOIN LBMessageBundle:Message m WITH m.fromUser = u OR m.toUser = u
                           JOIN m.fromUser fu
                           JOIN m.toUser tu
                           WHERE ((m.toUser = :userId AND m.isRead = 0 )) AND u.id != :userId and m.isDeleted = false
                           ORDER BY m.created DESC")
            ->setParameter('userId', $userId)
        ;

        return $query->getArrayResult();

    }

    /**
     * This function is used to get messages user list
     *
     * @param $userId
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @param $userId
     * @param $start
     * @param $count
     * @param array $blocks
     * @return array
     */
    public function findUserMessagesForMobile($userId, $start, $count, $blocks = [])
    {
        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare("
                        SELECT  DISTINCT (u.id), m.created, m.content,
                        (CASE WHEN m.to_user_id = :userId AND m.is_read = 0 then 1 ELSE 0 END) AS newMsg,
                        (CASE
                          WHEN (ur.from_user_id = :userId AND ur.from_conversation = :status ) then ur.from_conversation
                          WHEN (ur.to_user_id = :userId AND ur.to_conversation = :status ) then ur.to_conversation
                          ELSE 8 END) AS favorite
                        FROM fos_user u
                        JOIN (SELECT * FROM message WHERE (message.from_user_id = :userId) OR (message.to_user_id = :userId) ORDER BY message.created DESC LIMIT 1000 ) m ON (m.from_user_id = u.id) OR (m.to_user_id = u.id)
                        JOIN user_relation ur ON (ur.from_user_id = m.from_user_id and ur.to_user_id = m.to_user_id)  OR (ur.from_user_id = m.to_user_id and ur.to_user_id = m.from_user_id)
                        WHERE ((m.from_user_id = :userId AND m.to_user_id = u.id) OR (m.to_user_id = :userId AND m.from_user_id = u.id))
                        AND u.id != :userId AND m.is_deleted != 1 AND  (u.deactivate is NULL OR u.deactivate = 0) AND u.id not in (".implode($blocks, ',').")
                        GROUP BY u.id
                        ORDER BY favorite ASC, newMsg DESC, m.created DESC
                        LIMIT ".$count." OFFSET ".$start."
                          ");


        $stmt->bindValue('userId', $userId);
        $stmt->bindValue('status', UserRelation::FAVORITE);
        $stmt->bindValue('start', $start);
        $stmt->bindValue('cnt', $count);
        $stmt->execute();
        $ids =  $stmt->fetchAll();

        return $ids;
    }


//    /**
//     * This function is used to get messages user list
//     *
//     * @param $userId
//     * @param $userClass
//     * @return mixed
//     * @throws \Doctrine\ORM\NonUniqueResultException
//     */
//    public function findUserMessagesForMobile($userId, $userClass, $start, $count)
//    {
//        $stmt = $this->getEntityManager()
//            ->getConnection()
//            ->prepare("
//                        SELECT u.id, m.created, m.content,
//                         (CASE
//                          WHEN (ur.from_user_id = :userId AND (ur.from_conversation = :status OR ur.from_conversation = :newStatus) ) then ur.from_conversation
//                          WHEN (ur.to_user_id = :userId AND (ur.to_conversation = :status OR ur.to_conversation = :newStatus) ) then ur.to_conversation
//                          ELSE 8 END) AS favorite,
//                        (CASE WHEN m.to_user_id = :userId AND m.is_read = 0 then 1 ELSE 0 END) AS newMsg
//                        FROM fos_user u
//                        JOIN (SELECT * FROM message ORDER BY message.created DESC ) m ON (m.from_user_id = u.id) OR (m.to_user_id = u.id)
//                        LEFT JOIN user_relation ur ON (ur.from_user_id = m.from_user_id and ur.to_user_id = m.to_user_id)  OR (ur.from_user_id = m.to_user_id and ur.to_user_id = m.from_user_id)
//                        WHERE ((m.from_user_id = :userId AND m.to_user_id = u.id) OR (m.to_user_id = :userId AND m.from_user_id = u.id))
//                        AND u.id != :userId AND m.is_deleted != 1
//                        GROUP BY u.id
//                        ORDER BY favorite ASC, m.created DESC, newMsg DESC
//                        LIMIT ".$count." OFFSET ".$start."
//                          ");
//
//
//        $stmt->bindValue('userId', $userId);
//        $stmt->bindValue('status', UserRelation::FAVORITE);
//        $stmt->bindValue('newStatus', UserRelation::NEW_FAVORITE);
//        $stmt->bindValue('start', $start);
//        $stmt->bindValue('cnt', $count);
//        $stmt->execute();
//        $ids =  $stmt->fetchAll();
//
//        return $ids;
//    }

    /**
     * @param $user1Id
     * @param $user2Id
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getUsersLastMessage($user1Id, $user2Id)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT m
                           FROM LBMessageBundle:Message m
                           JOIN m.fromUser fu
                           JOIN m.toUser tu
                           WHERE ((fu.id = :user1Id AND tu.id = :user2Id) OR (fu.id = :user2Id AND tu.id = :user1Id)) AND m.isDeleted != 1
                           ORDER BY m.created DESC")
            ->setParameter('user1Id', $user1Id)
            ->setParameter('user2Id', $user2Id)
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param $userId
     * @return mixed
     */
    public function findUserUnreadMessagesCount($userId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT COUNT(m)
                           FROM LBMessageBundle:Message m
                           JOIN m.toUser tu
                           WHERE tu.id = :userId AND m.isRead = false AND m.isDeleted != 1")
            ->setParameter('userId', $userId)
            ->getSingleScalarResult();
    }

    /**
     * @param $userId
     * @param int $start
     * @param int $count
     * @return array
     */
    public function findUnreadCountByUsers($userId, $start = null, $count = null)
    {
        $query =  $this->getEntityManager()
            ->createQuery('SELECT COUNT(m) as cnt, fu.id
                           FROM LBMessageBundle:Message m
                           JOIN m.toUser tu
                           JOIN m.fromUser fu
                           INDEX BY fu.id
                           WHERE tu.id = :userId and m.isRead = false AND m.isDeleted != 1
                           GROUP BY fu.id')
            ->setParameter('userId', $userId);

        if($start != null){
            $query->setFirstResult($start);
        }

        if($count != null){
            $query->setFirstResult($start);
        }
        return $query->getArrayResult();
    }


    /**
     * @param $userId
     */
    public function removeMessageByUser($userId)
    {
        $this->getEntityManager()
            ->createQuery("DELETE from LBMessageBundle:Message m
                           WHERE m.fromUser =:userId OR m.toUser =:userId
                        ")
            ->setParameter('userId', $userId)
            ->execute();
    }


    public function insertMessage($fromId, $toId, $subject, $content)
    {
        // get connection
        $connection= $this->getEntityManager()->getConnection();

        $date = new \DateTime();
        $date = $date->format(\DateTime::ISO8601);

        $query = "INSERT INTO message(from_user_id, to_user_id, subject, content, is_read, is_deleted, created)
                  VALUES (:fromId, :toId, :subject, :content, 0, 0, :created)";
        $stmt = $connection->prepare($query);
        $params = array(
            "fromId"  => $fromId,
            "toId"  => $toId,
            "subject"  => $subject,
            "content"  => $content,
            "created"  => $date,
        );
        $stmt->execute($params);
    }
}
