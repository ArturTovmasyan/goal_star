<?php

namespace LB\UserBundle\Entity\Repository;
use AppBundle\Controller\Admin\UserStatisticController;
use AppBundle\Model\SearchData;
use Doctrine\ORM\Query;
use Doctrine\ORM\Tools\Pagination\Paginator;
use LB\UserBundle\Entity\User;
use LB\UserBundle\Entity\UserRelation;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $userId
     * @return array
     */
    public function findUserBlocks($userId)
    {
        $results = [-1];

        $query = $this->getEntityManager()
            ->createQuery("SELECT u.id
                           FROM LBUserBundle:User u
                           JOIN LBUserBundle:UserRelation ur with (ur.toUser = :userId AND ur.fromUser= u AND ur.fromStatus =:block) OR 
                                      (ur.toUser = u AND ur.fromUser= :userId AND ur.toStatus =:block)
                           
                           ")
            ->setParameter('block', UserRelation::BLOCK)
            ->setParameter('userId', $userId)
            ->getResult();

        ;

        if(is_array($query) && count($query) > 0){
            $results = array_map(function($item){ return $item['id']; }, $query);
        }

        return $results;
    }

    /**
     * @return array
     */
    public function findUserLocations()
    {
        $results = $this->getEntityManager()
            ->createQuery("SELECT DISTINCT (u.city) as city
                           FROM LBUserBundle:User u
                           WHERE u.city is not null AND LENGTH(u.city) > 0
                           ORDER BY u.city
                           ")
            ->getArrayResult();

        ;

        if(is_array($results)){
            $results = array_map(function($item){ return $item['city']; }, $results);
        }

        return $results;

    }

    /**
     * @param $user1
     * @param $user2
     * @return array|mixed
     */
    public function findUserRelation($user1, $user2)
    {
        $results = $this->getEntityManager()
            ->createQuery("SELECT ur
                           FROM LBUserBundle:UserRelation ur
                           WHERE (ur.fromUser = :user1 and ur.toUser = :user2) OR 
                                  (ur.fromUser = :user2 and ur.toUser = :user1) 
                           ")
            ->setParameter('user1', $user1)
            ->setParameter('user2', $user2)
            ->getOneOrNullResult();

        ;
        return $results;

    }

    /**
     * This function is used to get friend users
     *
     * @param $currentUser
     * @param $status
     * @return array
     */
    public function getUsersFriend($currentUser, $status = false)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();

        if($status){
            $query
                ->select(
                    'u as user' ,
                    '(CASE WHEN ur.fromUser = :user then ur.isLikeReadTo ELSE ur.isLikeReadFrom END) as st',
                    '(CASE WHEN ur.fromUser = :user then ur.toStatusCreated ELSE ur.fromStatusCreated END) as HIDDEN created'

                )
                ->orderBy('st')
                ->addOrderBy('created', 'DESC');
        }
        else{
            $query
                ->select('u');
        }
        $query
            ->addSelect('f')
            ->from('LBUserBundle:User', 'u')
            ->join('LBUserBundle:UserRelation', 'ur', 'with', '(ur.toUser = :user AND ur.fromUser= u) OR (ur.toUser = u AND ur.fromUser= :user) ')
            ->leftJoin('u.files', 'f')
            ->andWhere('ur.toStatus = :status and ur.fromStatus = :status')
            ->setParameter('status', UserRelation::LIKE)
            ->setParameter('user', $currentUser)

        ;

        $query
            ->setParameter('user', $currentUser);

        return $query->getQuery()->getResult();
    }


    /**
     * This function is used to all users with count
     * @param $start
     * @param $count
     * @return array
     */
    public function findAllWitCount($start, $count)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();

        $query
            ->select('u')
            ->from('LBUserBundle:User', 'u')
            ->setFirstResult($start)
            ->setMaxResults($count)
            ->groupBy('u.id')
        ;

        return $query->getQuery()->getResult();
    }



    /**
     * @return array
     */
    public function findOneUser()
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();

        $query
            ->select('u')
            ->from('LBUserBundle:User', 'u')
            ->setMaxResults(1)
            ->groupBy('u.id')
        ;

        return $query->getQuery()->getOneOrNullResult();
    }


    /**
     * This function is used to all users with count
     * @param $start
     * @param $count
     * @return array
     * @param $currentUser
     * @param $currentUser
     * @param $start
     * @param $count
     * @param array $blockUsers
     * @return array
     */
    public function findAllWitCountForSlider($currentUser, $start, $count, $blockUsers = [-1])
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();

        $query
            ->select('u')
            ->from('LBUserBundle:User', 'u')
            ->andWhere('u.id != :userId')
            ->andWhere('u.id not in (:ids)')
            ->setParameter('ids', $blockUsers)
            ->setFirstResult($start)
            ->setMaxResults($count)
            ->setParameter('userId', $currentUser)
            ->groupBy('u.id')
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * @param $registrationId
     * @return array
     */
    public function replaceRegistrationId($registrationId)
    {
        $strReplace = "\"".$registrationId."\"";

        $stmt = $this->getEntityManager()
            ->getConnection()
            ->prepare("
                          UPDATE fos_user u SET u.registration_ids = REPLACE( registration_ids, '" . $strReplace ."', '0')
                          WHERE registration_ids LIKE :id
                        ");
        $stmt->bindValue('id', '%\"' . $registrationId . '\"%');
        $stmt->execute();
    }

    /**
     * This function is used to all users with count
     * @return array
     */
    public function findAllWitJoin($currentUser, $start = 0, $count = 10)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder();

        $query
            ->select('u', 'f')
            ->from('LBUserBundle:User', 'u')
            ->leftJoin('LBUserBundle:UserRelation', 'ur', 'WITH', '(ur.fromUser = :currentUserId AND ur.toUser = u AND ur.toStatus = :block) OR (ur.toUser = :currentUserId AND ur.fromUser = u AND ur.fromStatus = :block) ')
            ->andWhere('ur.id is null')
            ->andWhere('u.id != :currentUserId')
            ->andWhere('u.I_am in (:looking_for)')
            ->andWhere('(u.searchVisibility is null or u.searchVisibility != 1)')
            ->setParameter('looking_for', $currentUser->getLookingFor())
            ->setParameter('currentUserId', $currentUser->getId())
            ->setParameter('block', UserRelation::BLOCK)
            ->leftJoin('u.profileImage', 'f')
            ->groupBy('u.id')
            ->orderBy('u.lastActivity', 'DESC')
            ->addOrderBy('u.id')
            ->setMaxResults($count)
        ;

        if($start != 0){
            $query
                ->setFirstResult($start);
        }

        $query->getQuery()->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true);
        return $query->getQuery()->getResult();
    }

    /**
     * This function is used to get friend users count
     *
     * @param $currentUser
     * @param $status
     * @return array
     */
    public function findNewFriendsCount($currentUser)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('count(u)')
            ->from('LBUserBundle:User', 'u')
            ->join('LBUserBundle:UserRelation', 'ur', 'with', '(ur.toUser = :user AND ur.fromUser= u AND ur.isLikeReadFrom = :isRead) OR (ur.toUser = u AND ur.fromUser= :user AND ur.isLikeReadTo = :isRead) ')
            ->andWhere('ur.toStatus = :status and ur.fromStatus = :status')
            ->setParameter('status', UserRelation::LIKE)
            ->setParameter('user', $currentUser)
            ->setParameter('isRead', false)

        ;

        return $query->getQuery()->getOneOrNullResult();
    }


    /**
     * @param $date
     * @param $userId
     * @return mixed
     */
    public function updateActivity($date, $userId)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->update('LBUserBundle:User', 'u')
            ->set('u.lastActivity', ':date')
            ->where('u.id = :userId')
            ->setParameter('date', $date)
            ->setParameter('userId', $userId)
            ;
        ;

        return $query->getQuery()->execute();
    }

    /**
     * @param $currentUser
     * @return array
     */
    public function findConversations($currentUser)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u.id', '(CASE WHEN ur.fromUser = :user then ur.fromConversation ELSE ur.toConversation END) as status')
            ->from('LBUserBundle:User', 'u', 'u.id')
            ->join('LBUserBundle:UserRelation', 'ur', 'with', '(ur.toUser = :user AND ur.fromUser= u) OR (ur.toUser = u AND ur.fromUser= :user) ')
            ->setParameter('user', $currentUser)

        ;
        return $query->getQuery()->getResult();
    }

    /**
     * @param $currentUser
     * @param $isAdmin
     * @return array
     */
    public function findFavoriteConversations($currentUser, $isAdmin)
    {
        $name = $isAdmin ? "concat(u.firstName , ' ' ,  u.lastName) as name" : "u.firstName  as name";
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select("u.id as id, $name, u.lastActivity,
                              (CASE WHEN i.path is not null then concat('uploads/', i.path) ELSE u.socialPhotoLink END) AS profileImage,
                              (CASE WHEN m.toUser = :user AND m.isRead = 0 then 1 ELSE 0 END) AS HIDDEN newMsg
                              "
            )
            ->from('LBUserBundle:User', 'u', 'u.id')
            ->leftJoin('u.profileImage', 'i')
            ->join('LBUserBundle:UserRelation', 'ur', 'with', '(ur.toUser = :user AND ur.fromUser= u AND ur.toConversation = :status) OR (ur.toUser = u AND ur.fromUser= :user AND ur.fromConversation = :status) ')
            ->join('LBMessageBundle:Message',  'm',  'WITH', 'm.fromUser = u OR m.toUser = u')
            ->setParameter('user', $currentUser)
            ->setParameter('status', UserRelation::FAVORITE)
            ->orderBy('m.created', 'DESC')
            ->addOrderBy('newMsg', 'DESC')
        ;
        return $query->getQuery()->getResult();
    }


    /**
     * This function is used to get users, that related to me
     *
     * @param $currentUser
     * @param $status
     * @return array
     */
    public function getUsersRelations($currentUser, $status)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from('LBUserBundle:User', 'u')
            ->join('LBUserBundle:UserRelation', 'ur', 'with', 'ur.toUser = :user AND ur.fromStatus != :block AND ur.fromUser= u');

        // check status
        if (is_numeric($status)) {
            //TODO: friend edit with both like
            // check is status for doubly like
            if ($status == UserRelation::FRIEND) {
                $query
                    ->andWhere('ur.toStatus = :status and ur.fromStatus = :status')
                    ->setParameter('status', UserRelation::LIKE);
            } else {
                $query
                    ->andWhere('ur.toStatus = :status')
                    ->setParameter('status', $status);
            }

        }

        $query
            ->setParameter('user', $currentUser)
            ->setParameter('block', UserRelation::BLOCK);

        return $query->getQuery()->getResult();
    }

    /**
     * @param $query
     * @param $iam
     * @param $lookingFor
     */
    private function addLookingFor(&$query, $iam, $lookingFor)
    {
        if($lookingFor == User::BISEXUAL){
            $query
                ->andWhere('((u.I_am = :man OR u.I_am = :woman) AND u.looking_for = :i_am)')
                ->setParameter('man', User::MAN)
                ->setParameter('woman', User::WOMAN)
                ->setParameter('i_am', $iam )
            ;
        }
        else{
            $query
                ->andWhere('u.I_am = :looking_for AND u.looking_for = :i_am ')
                ->setParameter('looking_for', $lookingFor)
                ->setParameter('i_am', $iam )
            ;
        }

//        // check looking for count
//        if(count($lookingFor) == 1){
//
//            $lookingFor = reset($lookingFor);
//            //
//            $query
//                ->andWhere('(u.I_am = :looking_for AND u.looking_for LIKE :i_am) OR u.I_am = :bi')
//                ->setParameter('looking_for', $lookingFor)
//                ->setParameter('i_am', '%' . $iAm . '%')
//                ->setParameter('bi', User::BISEXUAL)
//            ;
//
//        }
//        else{
//            $query
//                ->andWhere('(u.I_am in (:looking_for) AND u.looking_for LIKE :i_am ) OR u.I_am = :bi')
//                ->setParameter('looking_for', $lookingFor)
//                ->setParameter('i_am', '%' . $iAm . '%')
//                ->setParameter('bi', User::BISEXUAL)
//            ;
//        }
    }

    /**
     * @param SearchData $searchData
     * @param $currentUser
     * @param null $user
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function generateSearchQuery(SearchData $searchData, $currentUser, $user = null)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->from('LBUserBundle:User', 'u')
            ->leftJoin('LBUserBundle:UserRelation', 'ur', 'WITH', '(ur.fromUser = :currentUserId AND ur.toUser = u) OR (ur.toUser = :currentUserId AND ur.fromUser = u) ')
            ->andWhere("CASE WHEN ur.id is NOT NULL AND ur.toUser = :currentUserId AND ur.fromStatus IS NOT NULL THEN ur.fromStatus WHEN ur.id is NOT NULL AND ur.fromUser = :currentUserId AND ur.toStatus IS NOT NULL THEN ur.toStatus  ELSE -1 END != :block")
            ->andWhere('u.id != :currentUserId')
            ->andWhere('(u.searchVisibility is null or u.searchVisibility != 1)')
            ->setParameter('currentUserId', $currentUser->getId())
            ->setParameter('block', UserRelation::BLOCK)
            ->orderBy('u.lastActivity', 'DESC')
            ->addOrderBy('u.id')
        ;

        if($user){
            $query
                ->andWhere('u.id != :userId')
                ->setParameter('userId', $user->getId());
        }


        // check age from
        if($searchData->ageFrom){
            $query
                ->andWhere('DATE_DIFF(CURRENT_DATE(), u.birthday) / 365 >= :ageFrom')
                ->setParameter('ageFrom', $searchData->ageFrom);
        }

        // check age to
        if($searchData->ageTo){
            $query
                ->andWhere('(YEAR(CURRENT_DATE()) - YEAR(u.birthday)) <= :ageTo')
                ->setParameter('ageTo', $searchData->ageTo);
        }

        $zipSearch = false;

        // check zip code
        if($searchData->zipCode){
            if($searchData->distance && is_numeric($searchData->distance) &&
            array_key_exists('longitude', $searchData->zipCrd) && array_key_exists('latitude', $searchData->zipCrd)
            ){

                $zipSearch = true;

                //3959 search in miles
                //6371 search in km
                    $query
                        ->join('u.zip', 'z')
                        ->andWhere('(3959 * acos(cos(radians(:lat)) * cos(radians(z.lat)) * cos(radians(z.lng) - radians(:lng)) + sin(radians(:lat)) * sin(radians(z.lat)))) < :radius')
                        ->setParameter('lat', $searchData->zipCrd['latitude'])
                        ->setParameter('lng', $searchData->zipCrd['longitude'])
                        ->setParameter('radius',$searchData->distance);
            }else{
                $query
                    ->join('u.zip', 'z')
                    ->andWhere('z.code = :zipCode')
                    ->setParameter('zipCode', $searchData->zipCode);
            }
        }

        $lookingFor = $searchData->lookingFor ?  $searchData->lookingFor : $currentUser->getLookingFor();

        // check looking for
        if($lookingFor){
            $this->addLookingFor($query, $currentUser->getIAm(), $lookingFor);
        }

        // check city
        if($searchData->city){

            // get location
            $location = $searchData->city;

            // check distance
            if($searchData->distance && is_numeric($searchData->distance) && !$zipSearch){

                if(array_key_exists('location', $location)){
                    $coordinates = $location['location'];

                    //3959 search in miles
                    //6371 search in km
                    $query
                        ->andWhere('(3959 * acos(cos(radians(:lat)) * cos(radians(u.cityLat)) * cos(radians(u.cityLng) - radians(:lng)) + sin(radians(:lat)) * sin(radians(u.cityLat)))) < :radius')
                        ->setParameter('lat', $coordinates['latitude'])
                        ->setParameter('lng', $coordinates['longitude'])
                        ->setParameter('radius',$searchData->distance)
                    ;
                }

            }
            else{
                if(array_key_exists('address', $location)){

                    // get address
                    $this->addAddress($query, $location);
                }
            }
        }
        // check interests
        if ($searchData->interests) {

            $query
                ->leftJoin('u.interests', 'i')
                ->andWhere('i.id in (:ids)')
                ->setParameter('ids', $searchData->interests);
        }

        return $query;
    }

    private function addAddress($query, $location)
    {
        $address = $location['address'];
        $newAddress = explode(', ', $address);
        array_walk($newAddress, function (&$item){
            $item = explode(' ', $item);

            if(count($item) > 1){
                foreach ($item as $key =>$i){
                    if(is_numeric($i)){
                        unset($item[$key]);
                    }
                }
            }
            $item = implode(' ', $item);
        });
        $newAddress = implode(', ', $newAddress);
        
        $query
            ->andWhere('(LOWER(u.city) = :city OR LOWER(u.city) = :newCity)')
            ->setParameter('city', trim(strtolower($address)))
            ->setParameter('newCity', trim(strtolower($newAddress)));
    }

    /**
     * @param SearchData $searchData
     * @param $currentUser
     * @param $start
     * @param $count
     * @param $getCnt
     * @param null $user
     * @return array
     */
    public function findUserBySearchData(SearchData $searchData, $currentUser, $start, $count, $user = null, $getCnt = null)
    {
        $query = $this->generateSearchQuery($searchData, $currentUser, $user);
        $cnt = 0;
        // query for ids
        $idsQuery = clone $query;

        // query for count
        $cntQuery = clone $query;

        if($getCnt){
            $cnt = $cntQuery
                ->select('count(u)')
                ->getQuery()
                ->getSingleScalarResult();
        }

        $idsQuery
            ->select('DISTINCT u.id', 'CASE 
                                        WHEN ur.fromUser = :currentUserId AND (ur.fromStatus = :like or ur.fromStatus = :hide) THEN ur.fromStatus
                                        WHEN ur.toUser = :currentUserId AND (ur.toStatus = :like or ur.toStatus = :hide) THEN ur.toStatus
                                        ELSE -1 END as status')
            ->orderBy('status', 'ASC')
            ->addOrderBy('u.lastActivity', 'DESC')
            ->addOrderBy('u.id')
            ->setParameter('hide', UserRelation::HIDE)
            ->setParameter('like', UserRelation::LIKE)
            ->setFirstResult($start)
            ->setMaxResults($count)

        ;

        $ids = $idsQuery->getQuery()->getResult();
        $ids = array_map(function($item){ return $item['id']; }, $ids);

        $query =
            $this->getEntityManager()
                ->createQueryBuilder()
                ->select('u as user', 'CASE 
                                        WHEN ur.fromUser = :currentUserId AND (ur.fromStatus = :like or ur.fromStatus = :hide) THEN ur.fromStatus
                                        WHEN ur.toUser = :currentUserId AND (ur.toStatus = :like or ur.toStatus = :hide) THEN ur.toStatus
                                        ELSE -1 END as status',
                    'cus', 'pi')
                ->from('LBUserBundle:User', 'u')
                ->leftJoin('u.customer', 'cus')
                ->leftJoin('u.profileImage', 'pi')
                ->leftJoin('LBUserBundle:UserRelation', 'ur', 'WITH', '(ur.fromUser = :currentUserId AND ur.toUser = u) OR (ur.toUser = :currentUserId AND ur.fromUser = u) ')
                ->where('u.id in (:ids)')
                ->setParameter('ids', $ids)
                ->setParameter('currentUserId', $currentUser->getId())
                ->orderBy('status', 'ASC')
                ->addOrderBy('u.lastActivity', 'DESC')
                ->addOrderBy('u.id')
                ->setParameter('hide', UserRelation::HIDE)
                ->setParameter('like', UserRelation::LIKE)
    ;

        return array('cnt' => $cnt, 'query' => $query->getQuery()->getResult());
    }


    /**
     * @param $type
     * @param $id
     * @return array
     */
    public function findBySocial($type, $id)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from('LBUserBundle:User', 'u');

        // switch
        switch ($type) {
            case 'facebook':
                $query->andWhere('u.facebook_id =:id');
                break;

            case 'twitter':
                $query->andWhere('u.twitterId =:id');
                break;

            case 'instagram':
                $query->andWhere('u.instagramId =:id');
                break;
        }

        $query->setParameter('id', $id);

        return $query
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }


    /**
     * This function return users who like current user
     * @param $status
     * @param $currentUserId
     * @return array
     */
    public function findRelatedUsersByStatus($status, $currentUserId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
                           FROM LBUserBundle:User u
                           JOIN LBUserBundle:UserRelation ur WITH ur.fromUser = u AND ur.status = :status
                           JOIN ur.toUser tu WITH tu.id = :currentUserId")
            ->setParameter('currentUserId', $currentUserId)
            ->setParameter('status', $status)
            ->getResult();
    }

    /**
     * This function used to return users blocked by user by $userId
     *
     * @param $userId
     * @return array
     */
    public function findBlockedUsers($userId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
                           FROM LBUserBundle:User u
                           JOIN LBUserBundle:UserRelation ur WITH ur.toUser = u
                           JOIN ur.fromUser fu WITH fu.id = :fromUserId
                           WHERE ur.status = :blockedStatus")
            ->setParameter('blockedStatus', UserRelation::BLOCK)
            ->setParameter('fromUserId', $userId)
            ->getResult();
    }

    /**
     * @param $userId
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @param $userId
     * @param array $blocks
     * @return mixed
     */
    public function findUserWithRelations($userId, $blocks = [-1])
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u, pi, i, f, g
                           FROM LBUserBundle:User u
                           LEFT JOIN u.profileImage pi
                           LEFT JOIN u.files f
                           LEFT JOIN u.interests i
                           LEFT JOIN i.group g
                           WHERE u.id = :userId AND u.id not in (:ids)")
            ->setParameter('userId', $userId)
            ->setParameter('ids', $blocks)
            ->getOneOrNullResult();
    }

    /**
     * @param $uid
     * @param array $blocks
     * @return mixed
     */
    public function findUserWithRelationsByUID($uid, $blocks = [-1])
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u, pi, i, f, g
                           FROM LBUserBundle:User u
                           LEFT JOIN u.profileImage pi
                           LEFT JOIN u.files f
                           LEFT JOIN u.interests i
                           LEFT JOIN i.group g
                           WHERE u.uId = :userId AND u.id not in (:ids)")
            ->setParameter('userId', $uid)
            ->setParameter('ids', $blocks)
            ->getOneOrNullResult();
    }

    /**
     * @param $userId
     * @return array
     */
    public function findAllUsersWithRelationsWithout($userId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u, pi, i
                           FROM LBUserBundle:User u
                           LEFT JOIN u.profileImage pi
                           LEFT JOIN u.interests i
                           WHERE u.id != :userId and u.register = true")
            ->setParameter('userId', $userId)
            ->getResult();
    }


    /**
     * This function is used to return users by relations status and order by created date
     *
     * @param $action
     * @param $userId
     * @return int
     */
    public function findUserByAction($action, $userId, $start, $count)
    {

        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('us')
            ->from('LBUserBundle:User', 'us');

        switch ($action) {
            case  UserRelation::LIKE:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH', '(ur.fromUser = us and ur.toUser = :userId
                      AND ur.fromStatus = :action AND ur.toStatus != :action) OR (ur.toUser = us and ur.fromUser = :userId AND ur.toStatus = :action AND ur.fromStatus != :action)')
                    ->setParameter('userId', $userId)
                    ->setParameter('action', UserRelation::LIKE);
                break;
            case  UserRelation::LIKED_BY_ME:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH', '(ur.fromUser = us and ur.toUser = :userId
                      AND ur.fromStatus != :action AND ur.toStatus = :action) OR (ur.toUser = us and ur.fromUser = :userId AND ur.toStatus != :action AND ur.fromStatus = :action)')
                    ->setParameter('userId', $userId)
                    ->setParameter('action', UserRelation::LIKE);
                break;
            case UserRelation::BLOCK:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH', 'ur.toUser = us and ur.fromUser = :userId and ur.fromStatus = :action
                      or (ur.toUser = :userId and ur.fromUser = us and ur.toStatus = :action)')
                    ->setParameter('userId', $userId)
                    ->setParameter('action', $action);
                break;
            case UserRelation::FRIEND:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH', '(ur.fromUser = us AND ur.toUser = :userId) OR
                    (ur.toUser = us AND ur.fromUser = :userId)')
                    ->andWhere('ur.toStatus = :action AND ur.fromStatus = :action')
                    ->setParameter('userId', $userId)
                    ->setParameter('action', UserRelation::LIKE);
                break;
            case UserRelation::FAVORITE:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH',
                        '(ur.fromUser = us and ur.toUser = :userId AND ur.fromFavoriteStatus IN (:favoriteStatuses)) OR
                         (ur.toUser = us and ur.fromUser = :userId AND
                          ur.toFavoriteStatus IN (:favoriteStatuses))')
                    ->setParameter('userId', $userId)
                    ->setParameter('favoriteStatuses', array(UserRelation::FAVORITE, UserRelation::NEW_FAVORITE));
                break;
            case UserRelation::FAVORITE_BY_ME:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH',
                        '(ur.fromUser = us and ur.toUser = :userId AND ur.toFavoriteStatus IN (:favoriteStatuses)) OR
                         (ur.toUser = us and ur.fromUser = :userId AND
                          ur.fromFavoriteStatus IN (:favoriteStatuses))')
                    ->setParameter('userId', $userId)
                    ->setParameter('favoriteStatuses', array(UserRelation::FAVORITE, UserRelation::NEW_FAVORITE));
                break;
            case UserRelation::VISITOR:
                $query
                    ->join('LBUserBundle:UserRelation', 'ur', 'WITH',
                        '(ur.fromUser = us and ur.toUser = :userId AND ur.fromVisitorStatus IN (:visitorStatuses)) OR
                         (ur.toUser = us and ur.fromUser = :userId AND
                         ur.toVisitorStatus IN (:visitorStatuses))')
                    ->setParameter('userId', $userId)
                    ->setParameter('visitorStatuses', array(UserRelation::VISITOR, UserRelation::NEW_VISITOR));
                break;
            default:
        }
        $query
            ->orderBy('ur.created', 'DESC')
            ->setMaxResults($count)
            ->setFirstResult($start)
            ->addGroupBy('us.id')
        ;


        $paginator = new Paginator($query, $fetchJoinCollection = true);

        // get result
        $result = $paginator->getIterator()->getArrayCopy();

        return $result;

    }

    /**
     * This function is used to get file by userId and fileId
     *
     * @param $fileId
     * @return mixed|null
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findFileById($fileId)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT f FROM LBUserBundle:File f
                           WHERE  f.id = :fileId
                          ');
        $query->setParameter('fileId', $fileId);

        if (!$query->getResult()) // if query is empty, return null
        {
            return null;
        }

        $query->setMaxResults(1);
        return $query->getSingleResult();

    }

    /**
     * This function is used to get file by userId and fileId
     *
     * @param $userId
     * @return mixed|null
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findFileByUserId($userId)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT f FROM LBUserBundle:File f
                           INDEX BY f.id
                           JOIN f.user u
                           WHERE u.id = :userId
                          ');
        $query->setParameter('userId', $userId);

        if (!$query->getResult()) // if query is empty, return null
        {
            return null;
        }
        return $query->getResult();

    }

    /**
     * This function is used to get file by userId and type
     *
     * @param $userId
     * @param $type
     * @return array
     */
    public function findFileByIdAndType($userId, $type)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT f FROM LBUserBundle:File f
                           JOIN f.user u
                           WHERE u.id = :userId AND f.type = :types');
        $query->setParameter('userId', $userId);
        $query->setParameter('types', $type);

        return $query->getResult();

    }

    /**
     * @param $forgotData
     * @return array
     */
    public function findUsersByEmailOrUsername($forgotData)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
                           FROM LBUserBundle:User u
                           WHERE u.email = :forgotData or u.username = :forgotData")
            ->setParameter('forgotData', $forgotData)
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * This repository get users for select2
     * @param $name
     * @return array
     */
    public function findModeratorsForSelect2($group, $name, $currentUser)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u.id as id, CONCAT(COALESCE(u.firstName, ''), ' - ', COALESCE(u.lastName, '')) as label
 							FROM LBUserBundle:User u
                            WHERE u.id NOT IN (SELECT m.id
                                              FROM AppBundle:LBGroupModerators mg
                                              LEFT JOIN mg.lbGroup gmg
                                              LEFT JOIN mg.moderator m
                                              WHERE gmg.id = :group_id AND mg.authorStatus=1)
                                  AND (u.firstName LIKE :name OR u.lastName LIKE :name) AND u.id != :current_user
                            ")
            ->setParameters(array('name'=>'%' . $name . '%', 'group_id'=>$group, 'current_user'=>$currentUser))
            ->getResult();

    }

    /**
     * This repository get users for select2
     * @param $name
     * @return array
     */
    public function findMembersForSelect2($group, $name, $currentUser)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u.id as id, CONCAT(COALESCE(u.firstName, ''), ' - ', COALESCE(u.lastName, '')) as label
 							FROM LBUserBundle:User u
                            WHERE u.id NOT IN (SELECT m.id
                                              FROM AppBundle:LBGroupMembers mg
                                              LEFT JOIN mg.lbGroup gmg
                                              LEFT JOIN mg.member m
                                              WHERE gmg.id = :group_id AND mg.authorStatus=1)
                                   AND (u.firstName LIKE :name OR u.lastName LIKE :name) AND u.id != :current_user
                            ")
            ->setParameters(array('name'=>'%' . $name . '%', 'group_id'=>$group, 'current_user'=>$currentUser))
            ->getResult();

    }

    /**
     * @return array
     */
    public function findAllWithNoneImage()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u.id
 							FROM LBUserBundle:User u
                            WHERE u.profileImage is null
                            ")
            ->getResult();

    }

    /**
     * @param $from
     * @param $to
     * @param $groupBy
     * @return array
     */
    public function getStatistics($from, $to, $groupBy)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT (u.id) as CNT, u.createdAt as createdAt')
            ->from('LBUserBundle:User', 'u', 'u.createdAt')
            ->orderBy('u.createdAt')
        ;

        switch($groupBy){
            case UserStatisticController::WEEK:
                $query
                    ->addSelect('week(u.createdAt) as week')
                    ->groupBy('week');
                break;
            case UserStatisticController::MONTH:
                $query
                    ->addSelect('month(u.createdAt) as month')
                    ->groupBy('month');
                break;
            case UserStatisticController::YEAR:
                $query
                    ->addSelect('year(u.createdAt) as year')
                    ->groupBy('year');
                break;
            default :
                if(!$from && !$to){
                    $today = new \DateTime();
                    $query
                        ->andWhere('DATE_DIFF(:today, u.createdAt) <= 30')
                        ->setParameter('today', $today);
                }

                $query
                    ->groupBy('u.createdAt');
                break;
        }

        // check from
        if($from && strlen($from) > 1){
            $query
                ->andWhere('u.createdAt >= :from')
                ->setParameter('from', new \DateTime($from))
            ;
        }

        // check to
        if($to && strlen($to) > 1 ){
            $query
                ->andWhere('u.createdAt <= :to')
                ->setParameter('to', new \DateTime($to))
            ;
        }

        return $query->getQuery()->getResult();
    }


    public function findByIds($blockUsers)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
 							FROM LBUserBundle:User u
                            WHERE u.oldId in (:ids)
                            ")
            ->setParameter('ids', $blockUsers)
            ->getResult();
    }


    public function findByCustomerId($customerId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
 							FROM LBUserBundle:User u
 							JOIN u.customer cus
                            WHERE cus.stripeCustomerId  = :customerId
                            ")
            ->setParameter('customerId', $customerId)
            ->getOneOrNullResult();
    }

    /**
     * @param $ids
     * @return array
     */
    public function findById($ids)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u, i, cus
 							FROM LBUserBundle:User u
 							LEFT JOIN u.customer cus
 							LEFT JOIN u.profileImage i
                            INDEX BY u.id
                            WHERE u.id in (:ids)
                            ")
            ->setParameter('ids', $ids)
            ->getResult();
    }

    /**
     * @param $ids
     * @param $adminId
     * @return array
     */
    public function findUsersForSendingMessageById($ids, $adminId)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u as user, ur.id as relation
 							FROM LBUserBundle:User u
                            LEFT JOIN LBUserBundle:UserRelation ur WITH (ur.toUser = u AND ur.fromUser = :adminId) OR (ur.toUser = :adminId AND ur.fromUser = u) 
                            WHERE u.id in (:ids)
                            ")
            ->setParameter('ids', $ids)
            ->setParameter('adminId', $adminId)
            ->getResult();
    }

    /**
     * @return array
     */
    public function findRegistrationId()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
 							FROM LBUserBundle:User u
                            WHERE u.registrationIds  is not null
                            ")
            ->getResult();
    }

    /**
     * @param $search
     * @return array
     */
    public function findAllForSelect2($search)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u.id as id, u.email as text
 							FROM LBUserBundle:User u
 							WHERE u.email LIKE :search
                            ")
            ->setParameter('search', '%' . $search . '%')
            ->getResult();
    }


//    /**
//     * @param $search
//     * @return array
//     */
//    public function findSkiAndRiding($search)
//    {
//        $search = strtolower($search );
//        return $this->getEntityManager()
//            ->createQuery("SELECT LOWER(u.skyRide) as skyRide
// 							FROM LBUserBundle:User u
// 							WHERE LOWER(u.skyRide) LIKE :search
//                            ")
//            ->setParameter('search', '%' . $search. '%')
//            ->getResult();
//    }


    /**
     * @param $city
     * @param int $distance
     * @return array
     */
    public function findForMetric($city, $location, $distance = 50)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u.I_am as gender, u.birthday as age, i.name as interest, co.id as customer,u.hasSimulatePeriod as simulatePeriod,
             u.city as city,u.trialPeriod as trialPeriod, u.facebook_id as facebook, 
             u.twitterId as twitter, u.instagramId as instagram,
             u.registrationIds as registrationIds
            ')
            ->from("LBUserBundle:User", "u")
            ->where('u.city like :city or ((3959 * acos(cos(radians(:lat)) * cos(radians(u.cityLat)) * cos(radians(u.cityLng) - radians(:lng)) + sin(radians(:lat)) * sin(radians(u.cityLat)))) < :radius)')
            ->setParameter('city', '%'.$city.'%')
            ->setParameter('lat', $location[0]['lat'])
            ->setParameter('lng', $location[0]['lng'])
            ->setParameter('radius',$distance)
            ->leftJoin('u.interests', 'i')
            ->leftJoin('u.customer', 'co')
            ->groupBy('u.id')
            ->getQuery()->getResult();
    }

    public function findTopUsersByGenderAndType($iam, $city, $type, $location, $count = 10, $distance = 50){
        if($type == 'favorite' || $type == 'visitor') {

            $sql = "SELECT tbl.uid as uId, tbl.first_name as firstName, tbl.city as city, tbl.last_name as lastName,tbl.last_activity as activity, tbl.email as email, SUM(tbl.cnt) as cnt
                    FROM
                        (SELECT f0_.u_id as uid, f0_.first_name, f0_.city, f0_.last_name, f0_.last_activity, f0_.email, COUNT(ur.id) as cnt
                        FROM user_relation ur
                        JOIN fos_user as f0_ ON f0_.id = ur.from_user_id AND " . ($type == 'favorite' ? ("ur.from_favorite_status IN (:favoriteStatuses)") : ("ur.from_visitor_status IN (:visitStatuses)")) . "
                        AND (f0_.i_am = :iam AND (f0_.city LIKE :city OR ((3959 * ACOS(COS(RADIANS(:lat)) * COS(RADIANS(f0_.lat)) * COS(RADIANS(f0_.lng) - RADIANS(:lng)) + SIN(RADIANS(:lat)) * SIN(RADIANS(f0_.lat)))) < :radius)))
                        AND (f0_.deactivate != 1 or f0_.deactivate is null )
                        GROUP BY ur.from_user_id
                        
                        UNION
                        
                        SELECT f0_.u_id as uid, f0_.first_name, f0_.city, f0_.last_name, f0_.last_activity, f0_.email, COUNT(ur.id) as cnt
                        FROM user_relation ur
                        JOIN fos_user as f0_ ON f0_.id = ur.to_user_id AND " . ($type == 'favorite' ? ("ur.to_favorite_status IN (:favoriteStatuses)") : ("ur.to_visitor_status IN (:visitStatuses)")) . "
                        AND (f0_.i_am = :iam AND (f0_.city LIKE :city OR ((3959 * ACOS(COS(RADIANS(:lat)) * COS(RADIANS(f0_.lat)) * COS(RADIANS(f0_.lng) - RADIANS(:lng)) + SIN(RADIANS(:lat)) * SIN(RADIANS(f0_.lat)))) < :radius)))
                        AND (f0_.deactivate != 1 or f0_.deactivate is null )
                        GROUP BY ur.to_user_id) as tbl
                    GROUP BY tbl.uid
                    ORDER BY cnt DESC
                    LIMIT " . $count;

            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sql);
            $stmt->bindValue('iam', $iam);
            $stmt->bindValue('city', '%' . $city . '%');
            $stmt->bindValue('lat', $location[0]['lat']);
            $stmt->bindValue('lng', $location[0]['lng']);
            $stmt->bindValue('radius', $distance);
            if ($type == 'favorite') {
                $stmt->bindValue('favoriteStatuses', UserRelation::FAVORITE . "," . UserRelation::NEW_FAVORITE);
            }
            else {
                $stmt->bindValue('visitStatuses', UserRelation::VISITOR . "," . UserRelation::NEW_VISITOR);
            }

            $stmt->execute();
            $result = $stmt->fetchAll();

            return $result;
            
        }

        //3959 search in miles
        //6371 search in km
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->from('LBUserBundle:User', 'u')
            ->andWhere("u.I_am = :iam and (:city is NULL or u.city like :city or ((3959 * acos(cos(radians(:lat)) * cos(radians(u.cityLat)) * cos(radians(u.cityLng) - radians(:lng)) + sin(radians(:lat)) * sin(radians(u.cityLat)))) < :radius))")
            ->setParameter('iam', $iam)
            ->setParameter('city', '%'.$city.'%')
            ->setParameter('lat', $location[0]['lat'])
            ->setParameter('lng', $location[0]['lng'])
            ->setParameter('radius',$distance);

        if($type == 'like'){
            $query->setParameter('status', UserRelation::LIKE)
                ->select('u.uId,u.firstName,u.city,u.lastName,u.lastActivity as activity,u.email,(SELECT count(ur) FROM LBUserBundle:UserRelation ur
                           WHERE ur.fromUser = u AND ur.fromStatus = :status) as l_cnt')
                ->orderBy('l_cnt', 'DESC');
        } elseif ($type == 'message'){
            $query->select('u.uId,u.firstName,u.city,u.lastName,u.lastActivity as activity,u.email,(SELECT count(m) FROM LBMessageBundle:Message m
                           WHERE m.fromUser = u) as m_cnt')
                ->orderBy('m_cnt', 'DESC');
        } else{
            throw new \Exception('please add a type');
        }

        return $query->groupBy('u.id')
            ->setMaxResults($count)
            ->getQuery()
            ->getResult();
    }

    public function getCityLatLng($city)
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u.cityLat as lat,u.cityLng as lng
 							FROM LBUserBundle:User u
 							WHERE u.city = :city
                            ")
            ->setParameter('city', $city)
            ->setMaxResults(1)
            ->getResult();
    }

    public function findForSubscribeListBy()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
 							FROM LBUserBundle:User u
 							LEFT JOIN u.customer cus
 							WHERE u.hasSimulatePeriod = true
                            ")
            ->getResult();
    }


    /**
     * @return array
     */
    public function findAllWithProfileImage()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
 							FROM LBUserBundle:User u
 							WHERE u.profileImage is null and u.socialPhotoLink is null
                            ")
            ->getResult();
    }

    /**
     * @param $id
     * @param $isAdmin
     * @return array
     */
    public function findUserForNewChat($id, $isAdmin)
    {
        $name = $isAdmin ? "concat(u.firstName , ' ' ,  u.lastName) as name" : "u.firstName  as name";

        return $this->getEntityManager()
            ->createQuery("SELECT u.id as id, $name , u.lastActivity,
                              (CASE WHEN i.path is not null then concat('uploads/', i.path) ELSE u.socialPhotoLink END) AS profileImage
 							FROM LBUserBundle:User u
 							LEFT JOIN u.profileImage i
 							WHERE u.id = :id
                            ")
            ->setParameter('id', $id)
            ->getArrayResult();
    }

    /**
     * @return array
     */
    public function findUserWithoutZip()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT u
 							FROM LBUserBundle:User u
 							LEFT JOIN u.zip z
 							WHERE z.id is NULL 
                            ")
            ->getResult();
    }
}
